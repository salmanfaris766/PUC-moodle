1)
#include <stdio.h>

int main() {
    int arr[3][3];

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            scanf("%d", &arr[i][j]);
        }
    }

    int odd = 0, even = 0;

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if ((i + j) % 2 != 0) {
                odd += arr[i][j];
            } else {
                even += arr[i][j];
            }
        }
    }

    printf("%d\n%d", even, odd);

    return 0;
}
2)
#include <stdio.h>

struct data {
    int gen;
    int tal;
};

int main() {
    int n;
    scanf("%d", &n);
    struct data a[n];

    for (int i = 0; i < n; i++) {
        scanf("%d %d", &a[i].gen, &a[i].tal);
    }

    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (a[j].tal < a[j + 1].tal) {
                struct data temp = a[j];
                a[j] = a[j + 1];
                a[j + 1] = temp;
            }
        }
    }

    for (int i = 0; i < n; i++) {
        if (a[i].gen == 0) {
            printf("%d ", a[i].tal);
        }
    }

    for (int i = 0; i < n; i++) {
        if (a[i].gen == 1) {
            printf("%d ", a[i].tal);
        }
    }

    return 0;
}
3)
#include <stdio.h>

int main() {
    int i, j, n, x1, x2, y1, y2, t = 0;
    long long total = 0;
    int arr[1001][1001] = {0};

    scanf("%d", &n);
    while (n--) {
        scanf("%d %d %d %d %d", &x1, &y1, &x2, &y2, &t);

        for (i = x1; i <= x2; i++) {
            for (j = y1; j <= y2; j++) {
                if (arr[i][j] == 0) {
                    arr[i][j] = t;
                } else if (arr[i][j] > 0) {
                    arr[i][j] = -1 * (arr[i][j] + t);
                } else if (arr[i][j] < 0) {
                    arr[i][j] -= t;
                }
            }
        }
    }

    for (i = 1; i <= 1000; i++) {
        for (j = 1; j <= 1000; j++) {
            if (arr[i][j] < 0) {
                total += arr[i][j];
            }
        }
    }

    printf("%lld\n", (-1) * total);

    return 0;
}
